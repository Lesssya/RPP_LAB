import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç
currencies = {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="/help"), KeyboardButton(text="/list")],
        [KeyboardButton(text="/save_currency"), KeyboardButton(text="/convert")],
        [KeyboardButton(text="/delete_currency"), KeyboardButton(text="/clear_all")]
    ], resize_keyboard=True)
    return keyboard


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CurrencyStates(StatesGroup):
    waiting_for_currency_name = State()
    waiting_for_currency_rate = State()
    waiting_for_convert_currency = State()
    waiting_for_convert_amount = State()
    waiting_for_delete_currency = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–Ω–∞–¥
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start", "help"))
async def cmd_start(message: Message):
    await message.answer(
        "üí∞ <b>Currency Converter Bot</b> üí∞\n\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è! –≠—Ç–æ—Ç –±–æ—Ç –≤ —Ç–≤–æ–µ–º —Ä–∞–ø–æ—Ä—è–∂–µ–Ω–∏–∏, "
        "—Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –∑–∞–±—ã—Ç—å –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—É —É–º–Ω–æ–∂–µ–Ω–∏—è, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –ø—Ä–æ—á–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–±–ª—É–¥—ã, "
        "–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã –∫—É—Ä—Å–∞ –∑–¥–µ—Å—å –∑–∞ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤! \n\n"
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/save_currency - –∑–∞–ø–∏—Å–∞—Ç—å/—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n"
        "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ —Ä—É–±–ª–∏\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã\n"
        "/delete_currency - —É–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É\n"
        "/clear_all - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=get_main_keyboard()
    )


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç
@dp.message(Command("list"))
async def cmd_list(message: Message):
    if not currencies:
        await message.answer("–ê—Ç—è-—Ç—è —É —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Çüòè.", reply_markup=get_main_keyboard())
        return

    response = "‚úçÔ∏è <b>–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç:</b>\n"
    for currency, rate in currencies.items():
        response += f"‚Ä¢ {currency}: {rate} RUB\n"

    await message.answer(response, reply_markup=get_main_keyboard())


# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.message(Command("delete_currency"))
async def cmd_delete_currency(message: Message, state: FSMContext):
    if not currencies:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç —á—Ç–æ–±—ã —á—Ç–æ-—Ç–æ —É–¥–∞–ª—è—Ç—å.üòØ –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏, –ø–æ—Ç–æ–º –ø—Ä–æ—Å–∏‚òùÔ∏è", reply_markup=get_main_keyboard())
        return

    await message.answer("üòî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_main_keyboard())
    await state.set_state(CurrencyStates.waiting_for_delete_currency)


@dp.message(CurrencyStates.waiting_for_delete_currency)
async def process_delete_currency(message: Message, state: FSMContext):
    currency = message.text.upper()
    if currency in currencies:
        del currencies[currency]
        await message.answer(f"–í–∞–ª—é—Ç–∞ {currency} —É–¥–∞–ª–µ–Ω–∞.üëä", reply_markup=get_main_keyboard())
    else:
        await message.answer(f"–í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.üôÖ‚Äç‚ôÄÔ∏è", reply_markup=get_main_keyboard())
    await state.clear()


# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message(Command("clear_all"))
async def cmd_clear_all(message: Message):
    currencies.clear()
    await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö —É–¥–∞–ª–µ–Ω—ã.üíÅ‚Äç‚ôÄÔ∏è", reply_markup=get_main_keyboard())


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.message(Command("save_currency"))
async def cmd_save_currency(message: Message, state: FSMContext):
    await message.answer("üíµüí¥üí∂üí∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR –∏ –¥—Ä.):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CurrencyStates.waiting_for_currency_name)


@dp.message(CurrencyStates.waiting_for_currency_name)
async def process_currency_name(message: Message, state: FSMContext):
    currency_name = message.text.upper()
    await state.update_data(currency_name=currency_name)
    await message.answer(f"üîó –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å {currency_name} –∫ —Ä—É–±–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90.5):")
    await state.set_state(CurrencyStates.waiting_for_currency_rate)


@dp.message(CurrencyStates.waiting_for_currency_rate)
async def process_currency_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text)
        data = await state.get_data()
        currency_name = data['currency_name']
        currencies[currency_name] = rate
        await message.answer(f"‚úÖ –ö—É—Ä—Å {currency_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {rate} RUB", reply_markup=get_main_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90.5).")


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
@dp.message(Command("convert"))
async def cmd_convert(message: Message, state: FSMContext):
    if not currencies:
        await message.answer("üòß–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /save_currency.üíÉ",
                             reply_markup=get_main_keyboard())
        return

    await message.answer(" üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CurrencyStates.waiting_for_convert_currency)


@dp.message(CurrencyStates.waiting_for_convert_currency)
async def process_convert_currency(message: Message, state: FSMContext):
    currency_name = message.text.upper()
    if currency_name not in currencies:
        await message.answer("‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_main_keyboard())
        return

    await state.update_data(currency_name=currency_name)
    await message.answer(f" üåù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency_name}:")
    await state.set_state(CurrencyStates.waiting_for_convert_amount)


@dp.message(CurrencyStates.waiting_for_convert_amount)
async def process_convert_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        currency_name = data['currency_name']
        rate = currencies[currency_name]
        result = amount * rate
        await message.answer(f"üí∏ {amount} {currency_name} = {result:.2f} RUB", reply_markup=get_main_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())