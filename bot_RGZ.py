import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from dotenv import load_dotenv
import os
from datetime import datetime
import aiohttp

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
start_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="/add_operation"),
         types.KeyboardButton(text="/operations")],
        [types.KeyboardButton(text="/add_category")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)

type_operation_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–î–û–•–û–î"),
         types.KeyboardButton(text="–†–ê–°–•–û–î")]
    ],
    resize_keyboard=True
)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
currency_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="RUB"),
         types.KeyboardButton(text="USD"),
         types.KeyboardButton(text="EUR")]
    ],
    resize_keyboard=True
)


# ================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ==================
class RegistrationState(StatesGroup):
    name = State()


class CategoryState(StatesGroup):
    name = State()


class OperationState(StatesGroup):
    type = State()
    amount = State()
    date = State()
    category = State()

class OperationsState(StatesGroup):
    currency = State()


# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
async def get_db():
    return await asyncpg.connect(
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME"),
        host=os.getenv("DB_HOST", "localhost")
    )


async def execute(query: str, *args):
    conn = await get_db()
    try:
        await conn.execute(query, *args)
    finally:
        await conn.close()


async def fetchval(query: str, *args):
    conn = await get_db()
    try:
        result = await conn.fetchval(query, *args)
        return result
    finally:
        await conn.close()


async def fetch(query: str, *args):
    conn = await get_db()
    try:
        result = await conn.fetch(query, *args)
        return result
    finally:
        await conn.close()


async def get_currency_rate(currency: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
    if currency == "RUB":
        return 1.0

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'http://localhost:5000/rate?currency={currency}') as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data['rate']
                return None
    except Exception as e:
        print(f"Currency service error: {e}")
        return None


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==================
@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user = await fetchval("SELECT chat_id FROM users WHERE chat_id = $1", message.chat.id)

    if not user:
        await message.answer("ü§© –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await state.set_state(RegistrationState.name)
    else:
        await message.answer(
            "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_operation - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "/add_category - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "/operations - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π",
            reply_markup=start_keyboard
        )


@router.message(RegistrationState.name)
async def process_registration(message: types.Message, state: FSMContext):
    if not message.text or len(message.text) > 100:
        await message.answer("üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    try:
        await execute(
            "INSERT INTO users (chat_id, name) VALUES ($1, $2)",
            message.chat.id, message.text.strip()
        )
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ", reply_markup=start_keyboard)
    except Exception as e:
        await message.answer("üòî‚úã–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Registration error: {e}")
    finally:
        await state.clear()


@router.message(Command("add_category"))
async def add_category(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(CategoryState.name)


@router.message(CategoryState.name)
async def process_category_name(message: types.Message, state: FSMContext):
    if not message.text or len(message.text) > 50:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑")
        return

    try:
        existing = await fetchval(
            "SELECT id FROM categories WHERE chat_id = $1 AND name = $2",
            message.chat.id, message.text.strip()
        )

        if existing:
            await message.answer("‚ùå –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, ",
                                 reply_markup=start_keyboard)
        else:
            await execute(
                "INSERT INTO categories (name, chat_id) VALUES ($1, $2)",
                message.text.strip(), message.chat.id
            )
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{message.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞! ‚úÖ",
                                 reply_markup=start_keyboard)
    except Exception as e:
        await message.answer("‚ÄºÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        print(f"Category error: {e}")
    finally:
        await state.clear()


@router.message(Command("operations"))
async def show_operations(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    user = await fetchval("SELECT chat_id FROM users WHERE chat_id = $1", message.chat.id)

    if not user:
        await message.answer("‚ö†Ô∏è–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É
    await message.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:",
                         reply_markup=currency_keyboard)
    await state.set_state(OperationsState.currency)


@router.message(OperationsState.currency)
async def process_currency_choice(message: types.Message, state: FSMContext):
    if message.text not in ["RUB", "USD", "EUR"]:
        await message.answer("üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return

    selected_currency = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
    rate = await get_currency_rate(selected_currency)
    if rate is None and selected_currency != "RUB":
        await message.answer("üò• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã. –ü–æ–∫–∞–∑—ã–≤–∞—é –≤ RUB",
                             reply_markup=start_keyboard)
        selected_currency = "RUB"
        rate = 1.0

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    operations = await fetch(
        """SELECT o.date, o.sum, o.type_operation, c.name as category 
        FROM operations o
        JOIN categories c ON o.category_id = c.id
        WHERE o.chat_id = $1
        ORDER BY o.date DESC""",
        message.chat.id
    )

    if not operations:
        await message.answer("üôè –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π", reply_markup=start_keyboard)
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    response = f"üìä –í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({selected_currency}):\n\n"
    total_income = 0
    total_expense = 0

    for op in operations:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
        converted_amount = round(float(op['sum']) / rate, 2)

        if op['type_operation'] == "–î–û–•–û–î":
            total_income += converted_amount
            operation_type = "‚ûï"
        else:
            total_expense += converted_amount
            operation_type = "‚ûñ"

        response += (
            f"{operation_type} {op['date'].strftime('%d.%m.%Y')} - "
            f"{converted_amount} {selected_currency}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {op['category']}\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
    response += (
        f"–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (–¥–æ—Ö–æ–¥—ã –º–∏–Ω—É—Å —Ä–∞—Å—Ö–æ–¥—ã): {round(total_income - total_expense, 2)} {selected_currency}"
    )

    await message.answer(response, reply_markup=start_keyboard)
    await state.clear()


@router.message(Command("add_operation"))
async def add_operation(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=type_operation_keyboard)
    await state.set_state(OperationState.type)


@router.message(OperationState.type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["–î–û–•–û–î", "–†–ê–°–•–û–î"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏!")
        return

    await state.update_data(type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OperationState.amount)


@router.message(OperationState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except (ValueError, AttributeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤)")
        return

    await state.update_data(amount=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–µ–≥–æ–¥–Ω—è'):",
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[[types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è")]],
                             resize_keyboard=True
                         ))
    await state.set_state(OperationState.date)


@router.message(OperationState.date)
async def process_date(message: types.Message, state: FSMContext):
    if message.text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
        date = datetime.now().date()
    else:
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
            if date > datetime.now().date():
                await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return

    await state.update_data(date=date)

    try:
        categories = await fetch(
            "SELECT name FROM categories WHERE chat_id = $1 ORDER BY name",
            message.chat.id
        )
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        print(f"Categories load error: {e}")
        await state.clear()
        return

    if not categories:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ /add_category",
                            reply_markup=start_keyboard)
        await state.clear()
        return

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=cat['name'])] for cat in categories],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(OperationState.category)


@router.message(OperationState.category)
async def process_category(message: types.Message, state: FSMContext):
    data = await state.get_data()

    try:
        category_id = await fetchval(
            "SELECT id FROM categories WHERE chat_id = $1 AND name = $2",
            message.chat.id, message.text.strip()
        )

        if not category_id:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        await execute(
            """INSERT INTO operations 
            (date, sum, chat_id, type_operation, category_id)
            VALUES ($1, $2, $3, $4, $5)""",
            data['date'], data['amount'], message.chat.id,
            data['type'], category_id
        )

        await message.answer(
            f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–¢–∏–ø: {data['type']}\n"
            f"–°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
            f"–î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}",
            reply_markup=start_keyboard
        )
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Operation save error: {e}")
    finally:
        await state.clear()


# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"Bot error: {e}")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())